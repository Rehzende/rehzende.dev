[{"content":"Para continuar nossa jornada de Azure Pipelines, precisamos entender o mínimo de YML. A maioria das ferramentas de pipelines utiliza o YML como padrão de serialização (codificação de dados). Por isso, entender o mínimo já nos ajuda evitar alguns erros no momento de executar qualquer pipeline.\nVou abordar de maneira simples o YML para facilitar o entendimento de quem está começando. Podemos salvar o arquivo em duas extensões: .yml ou .yaml as duas formas são reconhecidas; a boa prática é sempre usar em lowcase.\nDica: espaço em YML é muito importante, por isso sempre use um PAR de espaços e não Tab; quando precisar comentar use o #(hash).\n# seu comentário Para iniciar um documento temos uma opção que não é obrigatória, porém útil quando estamos trabalhando com mais de uma definição por arquivo. Iniciamos o arquivo com 3 hifens e finalizamos com 3 pontos.`\n--- #só um comentário ... Mapeamento permite listar chaves com valores. Isso é útil nos casos em que você está atribuindo um nome ou uma propriedade a um elemento específico.\ncerveja: tecnologia copo: campo Às vezes precisamos trabalhar com listas e dicionários. Abaixo deixo dois exemplos do que eles são: Listas são coleções de itens que você define usando hífen:\n--- --- - apenas comece - entenda os conceitos - estude no seu tempo--- ferramentas: - docker - kubernetes - terraform - ansible Dicionários são coleções de mapeamentos de chave: valor. No exemplo abaixo, em que eu estou mapeando os dados de um pagador, tenho diversos dados, como: ‘pessoa’, ‘família’ e ‘endereço’. Porém, dentro de ‘endereço’ possuo outros dados. Isso tudo é um dicionário.\npagador: \u0026amp;id001 pessoa: Chris familia: Dumars endereco: rua: | 458 Walkman Dr. Suite #292 cidade: Royal Oak estado: MI cep: 48046 Existem casos que repetimos os mesmos dados em diversas linhas de nosso código. Para evitar que o tamanho do documento fique muito grande, podemos repetir esse código trabalhando com âncoras. Basta usar ‘E’ Comercial \u0026amp;+String para criar uma âncora e usar asterisco *+String para criar a referência da âncora. Veja abaixo:\ncopodecerveja: \u0026amp;tecnologia - dados_disponiveis: 2.5M - usuarios_conectados: 39k - linhas_de_codigos: \u0026quot;+10.216.248\u0026quot; - squads: \u0026quot;+50\u0026quot; - produtos:\u0026quot;+70\u0026quot; mesadobar: *tecnologia # Aqui estamos dizendo que a mesadobar tem os mesmos dados do copodecerveja Podemos também usar multilinhas para atribuir nossos valores, usando: |(pipe) um bloco literal que irá inserir quebras de linhas em seu texto. E \u0026gt;(maior) bloco dobrado que irá substituir todas as quebras de linhas por espaços simples.\n--- literal: | do código ao campo do campo ao código --- dobrado: \u0026gt; do código ao campo do campo à mesa do bar ... # Se convertermos esses dois exemplos em JSON, podemos ver melhor o que quis dizer. { \u0026quot;literal\u0026quot;: \u0026quot;do código ao campo\\ndo campo ao código\\n\u0026quot;, \u0026quot;dobrado\u0026quot;: \u0026quot;do código ao campo do campo à mesa do bar\\n\u0026quot; } Vou deixar um exemplo de uma ordem de venda que contém dados da operação. --- nota_fiscal: 34843 data: 2001-01-23 pagador: \u0026amp;id001 pessoa: Chris familia: Dumars endereco: rua: | 458 Walkman Dr. Suite #292 cidade: Royal Oak estado: MI cep: 48046 envio: *id001 produto: - id_produto: BL394D quantidade: 4 descricao : Basketball preco: 450.00 - id_produto: BL4438H quantidade : 1 descricao: Super Hoop preco: 2392.00 taxa : 251.42 total: 4443.52 ... No dia-dia, o yml salva nossas vidas por ser simples e poderoso ao mesmo tempo. Quando se trata de pipelines, o yml ajuda a reduzir a curva de aprendizagem de qualquer ferramenta por ser fácil de ler e entender.\nEspero que tenha te ajudado, nos vemos em breve na sequência da nossa jornada em Azure Pipelines. Valeu!\n","date":"2021-09-25T00:00:00Z","image":"https://rehzende.dev/p/1-drops-pipelines-yml/yml_hu687d4d2009b396e87e96a2dfe8182880_466165_120x120_fill_box_smart1_2.png","permalink":"https://rehzende.dev/p/1-drops-pipelines-yml/","title":"1 - Drops: Pipelines — YML"},{"content":"Posso dizer, sem dúvidas, que o mais assustador para alguém que está começando no universo de Devops e se vê diante de uma pipeline complexa, são os termos STAGE, STEP e JOBS. Até que consiga entender qual é a hierarquia deles, a pessoa pode ficar bem perdida. Para ficar mais fácil de entender, a documentação da Microsoft traz vários exemplos e um deles vou reproduzir abaixo. hierarquia-pipeline.yml\nSTAGE A:JOB 1:STEP 1.1STEP 1.2JOB 2:STEP 2.1STEP 2.2STAGE B:...exemplo.pipeline.yml\nstages:- stage:Build jobs:- job:BuildJob steps:- script:echo Building! - stage:Test jobs:- job:TestOnWindows steps:- script:echo Testing on Windows! - job:TestOnLinux steps:- script:echo Testing on Linux! - stage:Deploy jobs:- job:Deploy steps:- script:echo Deploying the code! STAGE é a coleção principal que contém todos os Jobs que devem ser executados. Por padrão, os stages nas pipelines são executados na sequência se o estágio anterior terminar com sucesso; caso contrário, a pipeline falhará ou os stages podem ser condicionadas a rodarem com dependência em um determinado estágio usando o dependeOn. JOB é uma coleção de etapas que, em uma pipeline, podemos usar para executar diferentes tipos de testes, builds ou o que for preciso em máquinas ou versões de sistemas operacionais diferentes. Isso porque, pra cada JOB você pode definir um AGENT POOL. Com o Agent Pool você pode escolher o sistema operacional em que a pipeline irá rodar determinado Job, podendo ser em Vms ou até mesmo Containers. STEPS são as sequências de operações dentro de um JOB, e é aqui que quase tudo funciona, pois podemos adicionar TASK, BASH, POWERSHELL, SCRIPT e muito mais.  E não é necessário seguir a estrutura — posso usar somente o job ou o stage em uma pipeline.\nVamos brincar, aí explico outros detalhes da pipeline no exemplo que vou montar. Para isso, vou criar um projeto do zero. Gosto do repositório de exemplos da Microsoft, pois contém exemplos de aplicações de quase todas as linguagens. Vou criar um FORK dela em meu Azure repo. https://github.com/microsoft/devops-project-samples.\n Criando um Repo \n","date":"2021-09-25T00:00:00Z","image":"https://rehzende.dev/p/2-drops-azure-pipelines-estrutura/pipelines_huf179b14060a344a42087e40bdc8e5b3f_849648_120x120_fill_box_smart1_2.png","permalink":"https://rehzende.dev/p/2-drops-azure-pipelines-estrutura/","title":"2 - Drops: Azure Pipelines - Estrutura"}]