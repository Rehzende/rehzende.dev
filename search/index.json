[{"content":"Para continuar nossa jornada de Azure Pipelines, precisamos entender o mínimo de YML. A maioria das ferramentas de pipelines utiliza o YML como padrão de serialização (codificação de dados). Por isso, entender o mínimo já nos ajuda evitar alguns erros no momento de executar qualquer pipeline.\nVou abordar de maneira simples o YML para facilitar o entendimento de quem está começando. Podemos salvar o arquivo em duas extensões: .yml ou .yaml as duas formas são reconhecidas; a boa prática é sempre usar em lowcase.\nDica: espaço em YML é muito importante, por isso sempre use um PAR de espaços e não Tab; quando precisar comentar use o #(hash).\n# seu comentárioPara iniciar um documento temos uma opção que não é obrigatória, porém útil quando estamos trabalhando com mais de uma definição por arquivo. Iniciamos o arquivo com 3 hifens e finalizamos com 3 pontos.`\n---#só um comentário...Mapeamento permite listar chaves com valores. Isso é útil nos casos em que você está atribuindo um nome ou uma propriedade a um elemento específico.\ncerveja:tecnologiacopo:campoÀs vezes precisamos trabalhar com listas e dicionários. Abaixo deixo dois exemplos do que eles são: Listas são coleções de itens que você define usando hífen:\n------- apenas comece - entenda os conceitos - estude no seu tempo--- ferramentas:- docker - kubernetes - terraform - ansibleDicionários são coleções de mapeamentos de chave: valor. No exemplo abaixo, em que eu estou mapeando os dados de um pagador, tenho diversos dados, como: ‘pessoa’, ‘família’ e ‘endereço’. Porém, dentro de ‘endereço’ possuo outros dados. Isso tudo é um dicionário.\npagador:\u0026amp;id001pessoa:Chrisfamilia:Dumarsendereco:rua:|458 Walkman Dr. Suite #292cidade:Royal Oakestado:MIcep:48046Existem casos que repetimos os mesmos dados em diversas linhas de nosso código. Para evitar que o tamanho do documento fique muito grande, podemos repetir esse código trabalhando com âncoras. Basta usar ‘E’ Comercial \u0026amp;+String para criar uma âncora e usar asterisco *+String para criar a referência da âncora. Veja abaixo:\ncopodecerveja:\u0026amp;tecnologia- dados_disponiveis:2.5M- usuarios_conectados:39k- linhas_de_codigos:\u0026#34;+10.216.248\u0026#34;- squads:\u0026#34;+50\u0026#34;- produtos:\u0026#34;+70\u0026#34;mesadobar:*tecnologia# Aqui estamos dizendo que a mesadobar tem os mesmos dados do copodecervejaPodemos também usar multilinhas para atribuir nossos valores, usando: |(pipe) um bloco literal que irá inserir quebras de linhas em seu texto. E \u0026gt;(maior) bloco dobrado que irá substituir todas as quebras de linhas por espaços simples.\n---literal:|do código ao campo do campo ao código---dobrado:\u0026gt;do código ao campo do campo à mesa do bar...Se convertermos esses dois exemplos em JSON, podemos ver melhor o que quis dizer.\n{ \u0026#34;literal\u0026#34;: \u0026#34;do código ao campo\\ndo campo ao código\\n\u0026#34;, \u0026#34;dobrado\u0026#34;: \u0026#34;do código ao campo do campo à mesa do bar\\n\u0026#34; } Vou deixar um exemplo de uma ordem de venda que contém dados da operação.\nnota_fiscal:34843data:2001-01-23pagador:\u0026amp;id001pessoa:Chrisfamilia:Dumarsendereco:rua:|458 Walkman Dr. Suite #292cidade:Royal Oakestado:MIcep:48046envio:*id001produto:- id_produto:BL394Dquantidade:4descricao :Basketballpreco:450.00- id_produto:BL4438Hquantidade :1descricao:Super Hooppreco:2392.00taxa :251.42total:4443.52...No dia-dia, o yml salva nossas vidas por ser simples e poderoso ao mesmo tempo. Quando se trata de pipelines, o yml ajuda a reduzir a curva de aprendizagem de qualquer ferramenta por ser fácil de ler e entender.\nEspero que tenha te ajudado, nos vemos em breve na sequência da nossa jornada em Azure Pipelines. Valeu!\n","date":"2021-09-25T00:00:00Z","image":"https://rehzende.dev/p/1-drops-pipelines-yml/yml_hu687d4d2009b396e87e96a2dfe8182880_466165_120x120_fill_box_smart1_2.png","permalink":"https://rehzende.dev/p/1-drops-pipelines-yml/","title":"1 - Drops: Pipelines — YML"},{"content":"Posso dizer, sem dúvidas, que o mais assustador para alguém que está começando no universo de Devops e se vê diante de uma pipeline complexa, são os termos STAGE, STEP e JOBS. Até que consiga entender qual é a hierarquia deles, a pessoa pode ficar bem perdida. Para ficar mais fácil de entender, a documentação da Microsoft traz vários exemplos e um deles vou reproduzir abaixo. hierarquia-pipeline.yml\nSTAGE A:JOB 1:STEP 1.1STEP 1.2JOB 2:STEP 2.1STEP 2.2STAGE B:...exemplo.pipeline.yml\nstages:- stage:Build jobs:- job:BuildJob steps:- script:echo Building! - stage:Test jobs:- job:TestOnWindows steps:- script:echo Testing on Windows! - job:TestOnLinux steps:- script:echo Testing on Linux! - stage:Deploy jobs:- job:Deploy steps:- script:echo Deploying the code! STAGE é a coleção principal que contém todos os Jobs que devem ser executados. Por padrão, os stages nas pipelines são executados na sequência se o estágio anterior terminar com sucesso; caso contrário, a pipeline falhará ou os stages podem ser condicionadas a rodarem com dependência em um determinado estágio usando o dependeOn. JOB é uma coleção de etapas que, em uma pipeline, podemos usar para executar diferentes tipos de testes, builds ou o que for preciso em máquinas ou versões de sistemas operacionais diferentes. Isso porque, pra cada JOB você pode definir um AGENT POOL. Com o Agent Pool você pode escolher o sistema operacional em que a pipeline irá rodar determinado Job, podendo ser em Vms ou até mesmo Containers. STEPS são as sequências de operações dentro de um JOB, e é aqui que quase tudo funciona, pois podemos adicionar TASK, BASH, POWERSHELL, SCRIPT e muito mais.  E não é necessário seguir a estrutura — posso usar somente o job ou o stage em uma pipeline.\nVamos brincar, aí explico outros detalhes da pipeline no exemplo que vou montar. Para isso, vou criar um projeto do zero. Gosto do repositório de exemplos da Microsoft, pois contém exemplos de aplicações de quase todas as linguagens. Vou criar um FORK dela em meu Azure repo. https://github.com/microsoft/devops-project-samples.\n Criando um Repo \n","date":"2021-09-25T00:00:00Z","image":"https://rehzende.dev/p/2-drops-azure-pipelines-estrutura/pipelines_huf179b14060a344a42087e40bdc8e5b3f_849648_120x120_fill_box_smart1_2.png","permalink":"https://rehzende.dev/p/2-drops-azure-pipelines-estrutura/","title":"2 - Drops: Azure Pipelines - Estrutura"},{"content":"Já pensou em ter um blog pessoal, para postar os seus artigos, postar informações sobre você e até criar um portifolio? O Tiago Krebes ensina a você como criar esse blog pessoal, usando o Github Pages e o HUGO. Veja o artigo dele aqui https://tiagokrebs.com/post/github-page/..\nNo artigo dele tem um script para deploy de sua aplicação, mas já pensou em fazer isso de modo automatico apenas comitando o seu codigo em um repositorio?\nVou te ensinar a criar essa pipeline e configurar o github para isso.\nCriando as chaves publica e privada para o deploy Vamos precisar de uma chave ssh publica e uma privada para permitir que o github actions tenha permissão para realizar o deploy de seu site.\nPara gerar uma é muito facil, siga os passos abaixo:\nssh-keygen -t rsa -b 4096 -C \u0026#34;$(git config user.email)\u0026#34; -f gh-pages -N \u0026#34;\u0026#34; Você terá uma saida identica a essa abaixo:\nrehzende@  /home/rehzende/Estudos/hugo/ssh-key \u0026gt; ssh-keygen -t rsa -b 4096 -C \u0026#34;$(git config user.email)\u0026#34; -f github-pages -N \u0026#34;\u0026#34; Generating public/private rsa key pair. Your identification has been saved in github-pages Your public key has been saved in github-pages.pub The key fingerprint is: SHA256:CBE9WA6ZKZ0p240smHzqr9MsKsHFMnf7bKXSIHWAPmo rehzende@hotmail.com The key\u0026#39;s randomart image is: +---[RSA 4096]----+ | .=@. | | o.O=o | |.oo*.oo. | |o+oB++.o | |. O.+ + S | |.E . o . | |o.o . = o | |.+ o . * | |+.=. o | +----[SHA256]-----+ Execute: cat github-pages e cat github-pages.pub para ver os conteudos dos arquivos gerados.\n# Conteudo da chave privada, nunca divulgue essa chave. rehzende@  /home/rehzende/Estudos/hugo/ssh-key \u0026gt; cat github-pages -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAACFwAAAAdzc2gtcn NhAAAAAwEAAQAAAgEAsaUitvcoPUjYnJPUw55Wk/ApEpt5pyYFa+wkAyqklCgX+hDI4OAl k9EyESK0th5LGJ+Ch1xsfsdfsdfsdfsdfdssdfDfEYO4h10Nhhq2wK1KrWBlvj9iqmzkhl vwYhMRxjczbm77qIFg8sJVk8Q+hVYt4HkqIwLmFpnRd2Oz2m1ROXKzM+qOwQdUdQd7zUs6 8Py7xcKykefaxGrFv0ILnum7oE1hTGgjZPUBhAaJPcEFuBxN0Amg4oKZcHKXJIi8WSWCps ........................................................ C25E/dWNWtwZLEr1VTb4R/x5+GnBpkXmbgTj4ZO0oECsuHLHFjzTlBhCqZ1V9S6VbV8Luu yaxfmvSHWQ1IPwTtNOpVnjNkcAVlwmBQlrlO06nhvePLs0tLNXr42GqsFI+wTjD+3W8hPI rEAupGdFiz+tkLSwAAAQEA0rW7fyUpGqPWmxIXiFy5zjBGphNyBocLMaEB5XZe/I+Dwk3Y CYXFodxHq2a9NJ5Kx+CGxIMsdfsdfsdfsdfsdMuiOVm/sdfsddrt/pRZiPfPZOK9OK9tFD 6vlVIslozfnl+crK8PzvPiJaGdrsbqrsdfsdfOj7TLIY4gQcXpRc93G2LAn3RYFRvdz2iP 8rQ96RL5603+Tp42U4/cxECprZuSsFMYeFQnR42Xfg2rwzhgE+J1rroidUx6jnLn1jXAlE L4EYNuUaP+WzUQlNfNmgG9vOVI5k1F0sz8ZD24B/lyCnWsZPOcFhnI/VqYnYE4HOfavf+b VmFnhWPXWm9xiwAAABRyZWh6ZW5kZUBob3RtYWlsLmNvbQECAwQF -----END OPENSSH PRIVATE KEY----- # Conteudo da chave publica rehzende@  /home/rehzende/Estudos/hugo/ssh-key \u0026gt; cat github-pages.pub ssh-rsa AAAAB3NzaC1asdfwfwefwefwefqwefewqfwe..............gfjfhgjhfjhgjfhgsdf7qA6QuvsRLFABNP7ENsMspE gza64CmgYBYP8zWuZ8llupR0I2jsK5mtOG/4q0SZXCrH76eVKeEA+b50G3AuSgtYWmUA1Be6KdOu7gjFgnQsJP8ZBoTf3agrnRD4 LQ9PtvndVtE+8/ZzqMTq2exkkDAv4H4Tcmk1XLbS452mzj9O5Ov1scM6G7t8i0krsV88sHWgyqb4zATvsyvWLcGQjkCH66nu26fg dgfhgfhRxupxaj0qtH/KyqERVo8uQ== rehzende@hotmail.com Vamos cadastrar essas chaves nos repositorios onde estão nossos conteudos. No meu caso eu tenho essa estrutura de repositorios:\nrehzende.dev \u0026gt; Conteudo estático. hugo-blog \u0026gt; o código fonte do meu blog.\nO deploy vai acontercer do repositorio hugo-blog para o rehzende.dev, para isso preciso adicionar uma chave de deploy no repósitorio rehzende.dev e uma chave secreta no hugo-blog.\nCriando a chave de Deploy No github, acesse: \u0026lsquo;https://github.com/{seu_user}/{seu_repo_destino}/settings/keys'.\n Settings Deploy Keys \nAdicione o conteudo de github-pages.pub conforme as imagens abaixo:\n Add Deploy keys \n Add Deploy keys \nVocê terá esse resultado:\n List Deploy keys \nCriando a variavel secreta No github, acesse: \u0026lsquo;https://github.com/{seu_user}/{seu_repo_origem}/settings/secrets/actions'.\n Secret \nCole o conteudo do arquivo github-pages\n Secret \nvocê terá o resultado:\n Secret \nCriando a pipeline No seu repositório onde contém o codigo fonte do HUGO crie a estrutrura de pastas abaixo:\ncd seu-repo-hugo/ # criando estrutura de pasta do github actions mkdir -p ./.github/workflows cd ./.github/workflows # Baixando o exemplo de pipeline curl https://gist.githubusercontent.com/Rehzende/00e820a7af41ac67cf67bd73d07f3334/raw/dd84a0c4a8d955ee777b598f19f7e591fed4cd2c/gh-pages-action.yml -o main.yml Altere as linhas abaixo do seu arquivo main.yml\n- name:Deployuses:peaceiris/actions-gh-pages@v3if:${{ github.ref == \u0026#39;refs/heads/main\u0026#39; }}with:deploy_key:${{ secrets.DEPLOY_KEY }}external_repository:username/repo-destino# mude aquipublish_branch: main # default:gh-pagespublish_dir:./public# cname: example.com - use caso tenha dominio personalizado%Commite os arquivos para a sua branch main\ngit commit add main.yml git commit -m \u0026#34;adicionando a pipeline\u0026#34; git push  ","date":"2021-09-25T00:00:00Z","image":"https://rehzende.dev/p/usando-o-github-actions-para-atualizar-o-github-pages/hugo_huaa422e9be693b2c4bfd2884e51021dfa_800591_120x120_fill_box_smart1_2.png","permalink":"https://rehzende.dev/p/usando-o-github-actions-para-atualizar-o-github-pages/","title":"Usando o Github Actions para atualizar o Github Pages"}]